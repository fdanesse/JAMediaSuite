
public static int main(string[] args) {
    GLib.stdout.printf("Hello, World\n");
    return 0;
}


El método principal no tiene porque ser definido dentro de una clase.
Sin embargo, si se define dentro de una clase debe ser estático.
No importa si es público o privado.
El retorno puede ser int o null.
Si retorna void, el programa terminará con salida 0.
No es necesario importar GLib ya que se hace siempre en todo programa vala.

Compilar mediante:
    valac hello.vala

Ejecutar mediante:
    ./hello

valac es el compilador de Vala.
El binario resultante tendrá el mismo nombre que el archivo de origen salvo que indiquemos el nombre final mediante -o nombre

Si tienes más de un archivo vala en tu proyecto, al compilar debes indicarselo al compilador:
    valac -o archivosalida archivo1 archivo2 archivo3

Si deseas obtener el codigo c de tu programa, debes pasarle el parámetro -C al compilador.
Si quieres cabeceras c de tu código, debes pasarle el parámetro -H al compilador.

Tipos de Datos:
    Byte, char, uchar;
    Character, unichar; a 32-bit Unicode character
    Integer, int, uint
    Long Integer, long, ulong
    Short Integer, short, ushort
    Guaranteed-size Integer, int8, int16, int32, int64, uint8, uint16, uint32, uint64. Los números indican las longitudes en bits.
    Float number, float, double
    Boolean, bool;
    Compound, struct
    Enumeration, enum; representada por enteros, no son clases como las enumeraciones de Java

    Ejemplos:
        /* atomic types */
        unichar c = 'u';
        float percentile = 0.75f;
        const double MU_BOHR = 927.400915E-26;
        bool the_box_has_crashed = false;

        /* defining a struct */
        struct Vector {
            public double x;
            public double y;
            public double z;
        }

        /* defining an enum */
        enum WindowType {
            TOPLEVEL,
            POPUP
        }

    El operador sizeof devuelve el tamaño en bytes de una variable.
        ulong nbytes = sizeof(int32);    // nbytes will be 4 (= 32 bits)

    Puedes determinar el valor mínimo y máximo de un tipo numérico con:
        int.MIN y int.MAX.

Strings:

    Las cadenas literales se ponen entre """. (En este caso no se respetan los escapes).

    Las cadenas con el prefijo '@' son plantillas.
    Pueden evaluar las variables incrustadas y expresiones con el prefijo "$":
        int a = 6, b = 7;
        string s = @"$a * $b = $(a * b)";

    Esto devolverá:
        6 * 7 = 42

    Se pueden cortar las cadenas por los índices de sus caracteres [inicio: fin]:
        saludo cadena = "hola, mundo";
    string s1 = saludo [7: 12];         // => "mundo"
        cadena s2 = saludo [- 4: - 2];  // => "o"
        uint8 b = saludo [7];           // => 0x77

    Parseos y conversiones a cadenas:
        bool b = bool.parse("false");           // => false
        int i = int.parse("-52");               // => -52
        double d = double.parse("6.67428E-11"); // => 6.67428E-11
        string s1 = true.to_string();           // => "true"
        string s2 = 21.to_string();             // => "21"

    Para imprimir y leer en consola, utiliza:
        tdout.printf(), stderr.printf() y stdin.read_line()

        stdout.printf("Hello, world\n");
        stdout.printf("%d %g %s\n", 42, 3.1415, "Vala");
        string input = stdin.read_line();
        int number = int.parse(stdin.read_line());

    Se puede determinar si una cadena está dentro de otra:
        if ("ere" in "Able was I ere I saw Elba.")

        http://www.valadoc.org/#!api=glib-2.0/string
        https://wiki.gnome.org/Projects/Vala/StringSample

Arrays:

int [] a = new int [10];
int [] b = {2, 4, 6, 8};

Se puede acceder a porciones de una lista:
int[] c = b[1:3];     // => { 4, 6 }
Pero esto resulta en una referencia a los datos solicitados, para evitar esto y obtener los datos, hay que crear una nueva variable:
unowned int[] c = b[1:3];     // => { 4, 6 }

Arrays multidimensionales:
int[,] c = new int[3,4];
int[,] d = {{2, 4, 6, 8},
            {3, 5, 7, 9},
            {1, 3, 5, 7}};
d[2,3] = 42;

Definición de una clase:
/* defining a class */
class Track : GLib.Object {             /* subclassing 'GLib.Object' */
    public double mass;                 /* a public field */
    public double name { get; set; }    /* a public property */
    private bool terminated = false;    /* a private field */
    public void terminate() {           /* a public method */
        terminated = true;
    }
}

Vala puede inferir el tipo de una variable si utilizamos la palabra reservada var:

var p = new Persona (); // igual: Persona p = new Persona ();
var s = "hola"; // mismo que: string s = "hola";
var l = new List <int> (); // mismo que: List <int> l = new List <int> ();
var i = 10; // mismo que: int i = 10;

Esto solo funciona para las variables locales.

MyFoo<string, MyBar<string, int>> foo = new MyFoo<string, MyBar<string, int>>();
vs
var foo = new MyFoo<string, MyBar<string, int>>();

Herencia:
/* Define a new type from a container like GLib.List with elements type GLib.Value */
public class ValueList : GLib.List<GLib.Value> {
        [CCode (has_construct_function = false)]
        protected ValueList ();
        public static GLib.Type get_type ();
}

Operadores bit a bit:
|, ^, &, ~, |=, &=, ^=

Operadores Lógicos:
<, >, >=, <=, !=
!, &&, || (not and or)

? :
operador condicional ternario. Evalúa una condición y regresa ya sea el valor de la izquierda o la sub-expresión correcta en función de si la condición es verdadera o falsa: condición de valor de ser cierto: valor si falso

??
operador de coalescencia null: un ?? b es equivalente a una! = null? una B. Este operador es útil por ejemplo para proporcionar un valor por defecto en caso de que una referencia es nulo:
stdout.printf("Hello, %s!\n", name ?? "unknown person");

While con comprobaci[on inicial>
while (a > b) { a--; }

While con comprobaci[on final>
do { a--; } while (a > b);

for (int a = 0; a < 10; a++) { stdout.printf("%d\n", a); }

foreach (int a in int_array) { stdout.printf("%d\n", a); }

if (a > 0) { stdout.printf("a is greater than 0\n"); }
else if (a < 0) { stdout.printf("a is less than 0\n"); }
else { stdout.printf("a is equal to 0\n"); }

switch (a) {
case 1:
    stdout.printf("one\n");
    break;
case 2:
case 3:
    stdout.printf("two or three\n");
    break;
default:
    stdout.printf("unknown\n");
    break;
}

Parametros opcionales en las funciones:
void f(int x, string s = "hello", double z = 0.5) { }

Vala realiza una comprobación básica nulabilidad en los parámetros del método y valores de retorno. Si es permisible para un parámetro de método o un valor de retorno a ser nulo, el símbolo de tipo debe postfixed con un? Modificador. Esta información adicional ayuda a que el compilador de Vala para realizar comprobaciones estáticas y añadir afirmaciones de tiempo de ejecución de las condiciones previas de los métodos, que pueden ayudar a evitar errores relacionados como la eliminación de referencias una referencia nula.
string? method_name(string? text, Foo? foo, Bar bar) {
    // ...
}

Metodos delegados:

delegate void DelegateType(int a);

void f1(int a) {
    stdout.printf("%d\n", a);
}

void f2(DelegateType d, int a) {
    d(a);       // Calling a delegate
}

void main() {
    f2(f1, 5);  // Passing a method as delegate argument to another method
}

Los delegados representan métodos, permitiendo pasar trozos de código como objetos.
Cualquier método que coincida con esta firma puede ser asignado a una variable de este tipo o pasa como
argumento un método de este tipo.

Los delegados también se pueden crear de forma local.
Un método miembro también se puede asignar a un delegado, por ejemplo,
class Foo {

    public void f1(int a) {
        stdout.printf("a = %d\n", a);
    }

    delegate void DelegateType(int a);

    public static int main(string[] args) {
        Foo foo = new Foo();
        DelegateType d1 = foo.f1;
        d1(10);
        return 0;
    }
}

Metodos Anonimos (expresión lambda):
(a) => { stdout.printf("%d\n", a); }

Un método anonimo por sí mismo no tiene mucho sentido.
Sólo es útil si se asigna directamente a una variable de un tipo delegado o pasa como argumento a otro método.

Asignar un metodo anonimo a una funcion delegada:
delegate void PrintIntFunc(int a);

void main() {
    PrintIntFunc p1 = (a) => { stdout.printf("%d\n", a); };
    p1(10);

    // Curly braces are optional if the body contains only one statement:
    PrintIntFunc p2 = (a) => stdout.printf("%d\n", a);
    p2(20);
}

Pasando un metodo anonimo a otro:
delegado int Comparador (int a, int b);

void my_sorting_algorithm (int [] de datos, Comparador comparan) {
// ... 'Comparar' se llama en algún lugar de aquí ...
}

void main () {
int [] = {de datos 3, 9, 2, 7, 5};
// Un método anónimo se pasa como segundo argumento:
my_sorting_algorithm (datos, (a, b) = {>
si (a <b) la devolución - 1;
si (a> b) return 1;
return 0;
});
}

puede acceder a las variables locales del método externo dentro de la expresión lambda:
delegate int IntOperation(int i);

IntOperation curried_add(int a) {
    return (b) => a + b;  // 'a' is an outer variable
}

void main() {
    stdout.printf("2 + 4 = %d\n", curried_add(2)(4));
}

curried_add devuelve un método de nueva creación que conserva el valor de a.
Este método devuelto se llama directamente después con 4 como argumento que resulta en la suma de los dos números.

Clases:

Vala soporta cuatro modificadores de acceso diferentes:
public No hay restricciones para el acceso.
private El acceso está limitado a la estructura de la definición de la clase. Este es el valor por defecto si no se especifica ningún modificador de acceso.
protected El acceso está limitado a dentro de la definición de la clase y de cualquier clase que hereda de la clase.
internal El acceso está limitado exclusivamente a las clases definidas en el mismo paquete.

El constructor inicializa las nuevas instancias de una clase. Tiene el mismo nombre que la clase, puede tener cero o más argumentos y se define sin tipo de retorno.

Constructores:
Vala no soporta la sobrecarga de constructor por las mismas razones que la sobrecarga de métodos no está permitido, lo que significa una clase no puede tener varios constructores con el mismo nombre. Sin embargo, esto no es un problema porque Vala soporta constructores con nombre. Si desea ofrecer varios constructores se les puede dar diferentes adiciones de nombres:
public class Button : Object {

    public Button() {
    }

    public Button.with_label(string label) {
    }

    public Button.from_stock(string stock_id) {
    }
}

Ejemplo:

public class Point : Object {
    public double x;
    public double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point.rectangular(double x, double y) {
        this(x, y);
    }

    public Point.polar(double radius, double angle) {
        this.rectangular(radius * Math.cos(angle), radius * Math.sin(angle));
    }
}

void main() {
    var p1 = new Point.rectangular(5.7, 1.2);
    var p2 = new Point.polar(5.7, 1.2);
}

Destrucción:

Aunque Vala gestiona la memoria para usted, puede que tenga que añadir su destructor si optar por hacer la gestión de memoria manual con punteros (más sobre esto más adelante) o si usted tiene que liberar otros recursos. La sintaxis es la misma que en C # y C ++:

class Demo : Object {
    ~Demo() {
        stdout.printf("in destructor");
    }
}

Señales:
public class Test : GLib.Object {

    public signal void sig_1(int a);

    public static int main(string[] args) {
        Test t1 = new Test();

        t1.sig_1.connect((t, a) => {
            stdout.printf("%d\n", a);
        });

        t1.sig_1(5);

        return 0;
    }
}

el controlador recibe 2 parametros porque cada vez que se emite una señal, el objeto sobre el que se emite se
pasa como primer argumento al.

Nota: Desde abril de 2010 las señales se pueden anotar con cualquier combinación de banderas:
[Signal (action=true, detailed=true, run=true, no_recurse=true, no_hooks=true)]
public signal void sig_1 ();


